# This is a basic workflow to help you get started with Actions

name: Deployment Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "develop" branch
  push:
    branches: [ "develop" ]
#  pull_request:
#    branches: [ "develop" ]
  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:

env:
  ACR_SERVER: ${{ vars.ACR_SERVER }}
  APP_NAME: notification
  NAMESPACE: cloud-mastery-notification

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  microservices-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64

      - name: Maven build
        run: |
          mvn clean package -DskipTests

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}
          path: target/${{ env.APP_NAME }}*.jar
          if-no-files-found: error

      - name: Debug
        run: ls -la

  microservices-push:
    # Run after 'build' stage completed
    needs: build
    runs-on: ubuntu-latest
    environment: common
    outputs:
      version: ${{ steps.imageTagGeneration.outputs.version }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}
          pattern: ${{ env.APP_NAME }}

      - run: ls -la

      - name: Generate latest image tag
        id: imageTagGeneration
        shell: bash
        run: echo "::set-output name=version::`date +%Y%m%d%H%M%S`.${GITHUB_REF##*/}.${GITHUB_SHA:0:7}"

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.ACR_NAME }}/${{ env.APP_NAME }}:${{ steps.imageTagGeneration.outputs.version }}
          context: '.'