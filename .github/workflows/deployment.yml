# This is a basic workflow to help you get started with Actions

name: Deployment Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "develop" branch
  push:
    branches: [ "develop" ]
#  pull_request:
#    branches: [ "develop" ]
  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:

env:
  ACR_SERVER: ${{ vars.ACR_SERVER }}
  APP_NAME: notification

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  package:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64

      - name: Maven build
        run: |
          mvn clean package -DskipTests

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}
          path: target/${{ env.APP_NAME }}*.jar
          if-no-files-found: error

      - uses: actions/upload-artifact@v4
        with:
          name: Dockerfile
          path: Dockerfile
          if-no-files-found: error

      - name: Debug
        run: ls -la

  containerize:
    # Run after 'build' stage completed
    needs: package
    runs-on: ubuntu-latest
    environment: common
    outputs:
      version: ${{ steps.imageTagGeneration.outputs.version }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}
          pattern: ${{ env.APP_NAME }}
          path: artifact

      - uses: actions/download-artifact@v4
        with:
          name: Dockerfile

      - run: ls -la
      - run: ls artifact -la

      - name: Generate latest image tag
        id: imageTagGeneration
        shell: bash
        run: echo "::set-output name=version::${GITHUB_REF##*/}-${GITHUB_SHA:0:7}"

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.ACR_SERVER }}/${{ env.APP_NAME }}:${{ steps.imageTagGeneration.outputs.version }}
          context: '.'

  deploy:
    needs: push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.containerize.outputs.version }}
      DEVOPS_REPO_NAME: cloud-mastery-devops
      PIPELINE_USERNAME: pipeline
      PIPELINE_EMAIL: vominhvo@gmail.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          repository: ${{ github.repository_owner }}/${{ env.DEVOPS_REPO_NAME }}
          ref: ${{ github.ref_name }}
      - name: Promote to AKS by update the image tag into chart values
        id: promote-to-aks
        run: |
          echo Promote to AKS with the latest tag: $VERSION
          echo "Updating image tag in the Chart values file: $APP_NAME-values.yaml"
          sed -i "s,tag:.*,tag:\ $VERSION," helm-charts/cloud-mastery-app/values/$GITHUB_REF_NAME/$APP_NAME-values.yaml
          # cat helm-charts/cloud-mastery-app/values/$GITHUB_REF_NAME/$APP_NAME-values.yaml
          git config --global user.email $PIPELINE_EMAIL && git config --global user.name $PIPELINE_USERNAME
          echo Check git status
          if [ -n "$(git status --porcelain)" ]; then
            echo "There are changes -> Add & push the changes";
            git add . && git commit -m "Update latest image tag: $VERSION"
            git push
          else
            echo "No changes, the deployment progress stopped.";
          fi